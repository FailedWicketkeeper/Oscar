import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Plus, Check, Trash2, Edit, ArrowUpRight, ArrowDownLeft } from "lucide-react";
import { format } from "date-fns";
import AddTransactionForm from "./AddTransactionForm";

export default function FriendDetails({
  friend,
  transactions,
  onBack,
  onAddTransaction,
  onSettleTransaction,
  onDeleteTransaction,
  onEditFriend,
  onDeleteFriend,
  currency,
  showAddTransaction,
  onCloseTransaction,
  onTransactionSubmit
}) {
  const unsettledTransactions = transactions.filter(t => !t.settled);
  const settledTransactions = transactions.filter(t => t.settled);

  const balance = unsettledTransactions.reduce((sum, t) => {
    return sum + (t.transaction_type === 'you_lent' ? t.amount : -t.amount);
  }, 0);

  const TransactionItem = ({ transaction }) => (
    <div className="p-4 rounded-xl bg-white/5 border border-white/10">
      <div className="flex items-start justify-between gap-4">
        <div className="flex items-start gap-3 flex-1">
          <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
            transaction.transaction_type === 'you_lent' 
              ? 'bg-green-500/20' 
              : 'bg-red-500/20'
          }`}>
            {transaction.transaction_type === 'you_lent' ? (
              <ArrowDownLeft className="w-5 h-5 text-green-400" />
            ) : (
              <ArrowUpRight className="w-5 h-5 text-red-400" />
            )}
          </div>
          <div className="flex-1">
            <p className="font-medium text-white">{transaction.description}</p>
            <p className="text-sm text-gray-400 mt-1">
              {format(new Date(transaction.date), 'MMM dd, yyyy')}
            </p>
            {transaction.settled && (
              <Badge className="bg-blue-500/20 text-blue-400 border-blue-500/30 mt-2">
                Settled
              </Badge>
            )}
          </div>
        </div>
        <div className="flex items-center gap-3">
          <div className="text-right">
            <p className={`font-bold text-lg ${
              transaction.transaction_type === 'you_lent' 
                ? 'text-green-400' 
                : 'text-red-400'
            }`}>
              {currency}{transaction.amount.toLocaleString()}
            </p>
            <p className="text-xs text-gray-400">
              {transaction.transaction_type === 'you_lent' ? 'you lent' : 'you borrowed'}
            </p>
          </div>
          {!transaction.settled && (
            <div className="flex gap-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => onSettleTransaction(transaction.id)}
                className="text-green-400 hover:text-green-300 hover:bg-green-500/20"
              >
                <Check className="w-4 h-4" />
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => onDeleteTransaction(transaction.id)}
                className="text-red-400 hover:text-red-300 hover:bg-red-500/20"
              >
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen p-6 md:p-8">
      <div className="max-w-4xl mx-auto space-y-6">
        <div className="flex items-center gap-4">
          <Button
            variant="ghost"
            size="icon"
            onClick={onBack}
            className="text-white hover:bg-white/10"
          >
            <ArrowLeft className="w-5 h-5" />
          </Button>
          <div className="flex-1">
            <h1 className="text-3xl font-bold text-white">{friend.name}</h1>
            {friend.phone && <p className="text-gray-400 mt-1">{friend.phone}</p>}
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => onEditFriend(friend)}
              className="border-white/20 text-white hover:bg-white/10"
            >
              <Edit className="w-4 h-4 mr-2" />
              Edit
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => onDeleteFriend(friend.id)}
              className="border-red-500/30 text-red-400 hover:bg-red-500/20"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              Delete
            </Button>
          </div>
        </div>

        {/* Balance Summary */}
        <Card className={`border-2 backdrop-blur-xl ${
          balance === 0 
            ? 'bg-white/10 border-white/20' 
            : balance > 0 
            ? 'bg-gradient-to-br from-green-500/10 to-emerald-500/10 border-green-500/30' 
            : 'bg-gradient-to-br from-red-500/10 to-orange-500/10 border-red-500/30'
        }`}>
          <CardContent className="p-8 text-center">
            {balance === 0 ? (
              <div>
                <p className="text-gray-400 text-lg">All settled up!</p>
                <p className="text-gray-500 text-sm mt-2">No outstanding balance</p>
              </div>
            ) : balance > 0 ? (
              <div>
                <p className="text-green-400 text-lg mb-2">They owe you</p>
                <p className="text-5xl font-bold text-white">
                  {currency}{Math.abs(balance).toLocaleString()}
                </p>
              </div>
            ) : (
              <div>
                <p className="text-red-400 text-lg mb-2">You owe them</p>
                <p className="text-5xl font-bold text-white">
                  {currency}{Math.abs(balance).toLocaleString()}
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        <Button 
          onClick={onAddTransaction}
          className="w-full bg-amber-500 hover:bg-amber-600 text-white"
        >
          <Plus className="w-4 h-4 mr-2" />
          Add Transaction
        </Button>

        {showAddTransaction && (
          <AddTransactionForm
            friend={friend}
            onSubmit={onTransactionSubmit}
            onCancel={onCloseTransaction}
            currency={currency}
          />
        )}

        {/* Unsettled Transactions */}
        {unsettledTransactions.length > 0 && (
          <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
            <CardHeader className="border-b border-white/10">
              <CardTitle className="text-xl font-bold text-white">Active Transactions</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-3">
                {unsettledTransactions.map(transaction => (
                  <TransactionItem key={transaction.id} transaction={transaction} />
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Settled Transactions */}
        {settledTransactions.length > 0 && (
          <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
            <CardHeader className="border-b border-white/10">
              <CardTitle className="text-xl font-bold text-white">Transaction History</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-3">
                {settledTransactions.map(transaction => (
                  <TransactionItem key={transaction.id} transaction={transaction} />
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {transactions.length === 0 && (
          <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
            <CardContent className="p-12 text-center">
              <p className="text-gray-400">No transactions yet</p>
              <p className="text-gray-500 text-sm mt-2">Add your first transaction above</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
