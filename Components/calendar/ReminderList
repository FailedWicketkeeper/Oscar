
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Pencil, Trash2, Calendar, Bell, Repeat } from "lucide-react";
import { format, isPast, isFuture, isToday } from "date-fns";
import { Skeleton } from "@/components/ui/skeleton";

const reminderTypeColors = {
  "Salary Day": "bg-green-500/20 text-green-400 border-green-500/30",
  "Rent Payment": "bg-red-500/20 text-red-400 border-red-500/30",
  "EMI Payment": "bg-orange-500/20 text-orange-400 border-orange-500/30",
  "Bill Payment": "bg-yellow-500/20 text-yellow-400 border-yellow-500/30",
  "Subscription": "bg-purple-500/20 text-purple-400 border-purple-500/30",
  "Shopping": "bg-pink-500/20 text-pink-400 border-pink-500/30",
  "Other": "bg-gray-500/20 text-gray-400 border-gray-500/30"
};

export default function ReminderList({ reminders, isLoading, onEdit, onDelete, onMarkCompleted, currency }) {
  if (isLoading) {
    return (
      <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
        <CardContent className="p-6">
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="p-4 rounded-xl bg-white/5">
                <Skeleton className="h-4 w-48 mb-2" />
                <Skeleton className="h-3 w-32" />
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  if (reminders.length === 0) {
    return (
      <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
        <CardContent className="p-12 text-center">
          <Calendar className="w-16 h-16 text-gray-600 mx-auto mb-4" />
          <p className="text-gray-400 text-lg">No reminders yet</p>
          <p className="text-gray-500 text-sm mt-2">Add your first reminder to get started</p>
        </CardContent>
      </Card>
    );
  }

  // Filter out completed reminders and categorize
  const activeReminders = reminders.filter(r => !r.completed);
  const upcomingReminders = activeReminders.filter(r => isFuture(new Date(r.date)) || isToday(new Date(r.date)));
  const pastReminders = activeReminders.filter(r => isPast(new Date(r.date)) && !isToday(new Date(r.date)));

  const ReminderSection = ({ title, items }) => {
    if (items.length === 0) return null;

    return (
      <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
        <CardContent className="p-6">
          <h3 className="text-lg font-semibold text-white mb-4">{title}</h3>
          <div className="space-y-3">
            {items.map((reminder) => {
              const reminderDate = new Date(reminder.date);
              const isOverdue = isPast(reminderDate) && !isToday(reminderDate);
              
              return (
                <div
                  key={reminder.id}
                  className={`p-4 rounded-xl transition-all duration-200 group ${
                    isToday(reminderDate) 
                      ? 'bg-amber-500/20 border border-amber-500/40' 
                      : 'bg-white/5 hover:bg-white/10'
                  }`}
                >
                  <div className="flex items-start justify-between gap-4">
                    <div className="flex items-start gap-4 flex-1">
                      <div className="w-12 h-12 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center shadow-lg flex-shrink-0">
                        <Bell className="w-6 h-6 text-white" />
                      </div>
                      <div className="flex-1">
                        <div className="flex items-start justify-between gap-2">
                          <h4 className="font-medium text-white text-lg">{reminder.title}</h4>
                        </div>
                        <div className="flex flex-wrap items-center gap-2 mt-2">
                          <Badge className={`${reminderTypeColors[reminder.reminder_type]} border`}>
                            {reminder.reminder_type}
                          </Badge>
                          {reminder.recurring && (
                            <Badge variant="outline" className="border-white/20 text-gray-300">
                              <Repeat className="w-3 h-3 mr-1" />
                              {reminder.recurring_frequency}
                            </Badge>
                          )}
                          {isToday(reminderDate) && (
                            <Badge className="bg-amber-500/20 text-amber-400 border-amber-500/30">
                              Today
                            </Badge>
                          )}
                          {isOverdue && (
                            <Badge className="bg-red-500/20 text-red-400 border-red-500/30">
                              Overdue
                            </Badge>
                          )}
                        </div>
                        <div className="flex items-center gap-4 mt-3 text-sm">
                          <div className="flex items-center gap-1 text-gray-400">
                            <Calendar className="w-4 h-4" />
                            {format(reminderDate, 'MMM dd, yyyy')}
                          </div>
                          {reminder.amount && (
                            <span className="font-semibold text-amber-400">
                              {currency}{reminder.amount.toLocaleString()}
                            </span>
                          )}
                        </div>
                        {reminder.notes && (
                          <p className="text-sm text-gray-400 mt-2">{reminder.notes}</p>
                        )}
                      </div>
                    </div>
                    <div className="flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => onMarkCompleted(reminder.id)}
                        className="text-green-400 hover:text-green-300 hover:bg-green-500/20"
                      >
                        Mark Done
                      </Button>
                      <div className="flex gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => onEdit(reminder)}
                          className="text-blue-400 hover:text-blue-300 hover:bg-blue-500/20"
                        >
                          <Pencil className="w-4 h-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => onDelete(reminder.id)}
                          className="text-red-400 hover:text-red-300 hover:bg-red-500/20"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    );
  };

  return (
    <div className="space-y-6">
      <ReminderSection title="Upcoming Reminders" items={upcomingReminders} />
      <ReminderSection title="Past Reminders" items={pastReminders} />
    </div>
  );
}
