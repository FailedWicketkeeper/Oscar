import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { format } from "date-fns";

export default function ReminderForm({ reminder, onSubmit, onCancel, currency }) {
  const [formData, setFormData] = useState(reminder || {
    title: "",
    reminder_type: "",
    date: format(new Date(), 'yyyy-MM-dd'),
    amount: "",
    recurring: false,
    recurring_frequency: "",
    notes: ""
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    const data = {
      ...formData,
      amount: formData.amount ? parseFloat(formData.amount) : undefined
    };
    if (!data.recurring) {
      delete data.recurring_frequency;
    }
    onSubmit(data);
  };

  return (
    <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
      <CardHeader className="border-b border-white/10">
        <CardTitle className="text-xl font-bold text-white">
          {reminder ? 'Edit Reminder' : 'Add New Reminder'}
        </CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="title" className="text-gray-300">Title *</Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => setFormData({...formData, title: e.target.value})}
                placeholder="e.g., Rent Payment"
                required
                className="bg-white/5 border-white/20 text-white placeholder:text-gray-500"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="reminder_type" className="text-gray-300">Type *</Label>
              <Select
                value={formData.reminder_type}
                onValueChange={(value) => setFormData({...formData, reminder_type: value})}
              >
                <SelectTrigger className="bg-white/5 border-white/20 text-white">
                  <SelectValue placeholder="Select type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Salary Day">Salary Day</SelectItem>
                  <SelectItem value="Rent Payment">Rent Payment</SelectItem>
                  <SelectItem value="EMI Payment">EMI Payment</SelectItem>
                  <SelectItem value="Bill Payment">Bill Payment</SelectItem>
                  <SelectItem value="Subscription">Subscription</SelectItem>
                  <SelectItem value="Shopping">Shopping</SelectItem>
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="date" className="text-gray-300">Date *</Label>
              <Input
                id="date"
                type="date"
                value={formData.date}
                onChange={(e) => setFormData({...formData, date: e.target.value})}
                required
                className="bg-white/5 border-white/20 text-white"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="amount" className="text-gray-300">Amount ({currency})</Label>
              <Input
                id="amount"
                type="number"
                step="0.01"
                value={formData.amount}
                onChange={(e) => setFormData({...formData, amount: e.target.value})}
                placeholder="Optional"
                className="bg-white/5 border-white/20 text-white placeholder:text-gray-500"
              />
            </div>
          </div>

          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="recurring"
                checked={formData.recurring}
                onCheckedChange={(checked) => setFormData({...formData, recurring: checked})}
                className="border-white/20"
              />
              <Label htmlFor="recurring" className="text-gray-300">Recurring reminder</Label>
            </div>

            {formData.recurring && (
              <div className="space-y-2">
                <Label htmlFor="recurring_frequency" className="text-gray-300">Frequency</Label>
                <Select
                  value={formData.recurring_frequency}
                  onValueChange={(value) => setFormData({...formData, recurring_frequency: value})}
                >
                  <SelectTrigger className="bg-white/5 border-white/20 text-white">
                    <SelectValue placeholder="Select frequency" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Weekly">Weekly</SelectItem>
                    <SelectItem value="Monthly">Monthly</SelectItem>
                    <SelectItem value="Yearly">Yearly</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="notes" className="text-gray-300">Notes</Label>
            <Textarea
              id="notes"
              value={formData.notes}
              onChange={(e) => setFormData({...formData, notes: e.target.value})}
              placeholder="Additional details..."
              className="bg-white/5 border-white/20 text-white placeholder:text-gray-500 min-h-[80px]"
            />
          </div>

          <div className="flex gap-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={onCancel}
              className="flex-1 border-white/20 text-white hover:bg-white/10"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1 bg-amber-500 hover:bg-amber-600 text-white"
            >
              {reminder ? 'Update' : 'Add'} Reminder
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}
