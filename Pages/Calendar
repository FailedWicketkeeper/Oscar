
import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import ReminderForm from "../components/calendar/ReminderForm";
import ReminderList from "../components/calendar/ReminderList";

export default function Calendar() {
  const [showForm, setShowForm] = useState(false);
  const [editingReminder, setEditingReminder] = useState(null);
  
  const queryClient = useQueryClient();

  const { data: reminders = [], isLoading } = useQuery({
    queryKey: ['reminders'],
    queryFn: () => base44.entities.Reminder.list('date'),
  });

  const { data: user } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => base44.auth.me(),
  });

  const createMutation = useMutation({
    mutationFn: (data) => base44.entities.Reminder.create(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['reminders'] });
      setShowForm(false);
      setEditingReminder(null);
    },
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, data }) => base44.entities.Reminder.update(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['reminders'] });
      setShowForm(false);
      setEditingReminder(null);
    },
  });

  const deleteMutation = useMutation({
    mutationFn: (id) => base44.entities.Reminder.delete(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['reminders'] });
    },
  });

  const markAsCompletedMutation = useMutation({
    mutationFn: ({ id }) => base44.entities.Reminder.update(id, { completed: true }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['reminders'] });
    },
  });

  const handleSubmit = (data) => {
    if (editingReminder) {
      updateMutation.mutate({ id: editingReminder.id, data });
    } else {
      createMutation.mutate(data);
    }
  };

  const handleEdit = (reminder) => {
    setEditingReminder(reminder);
    setShowForm(true);
  };

  const handleDelete = (id) => {
    if (window.confirm('Are you sure you want to delete this reminder?')) {
      deleteMutation.mutate(id);
    }
  };

  const handleMarkCompleted = (id) => {
    markAsCompletedMutation.mutate({ id });
  };

  const currency = user?.currency || 'â‚¹';

  return (
    <div className="min-h-screen p-6 md:p-8">
      <div className="max-w-5xl mx-auto space-y-6">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <div>
            <h1 className="text-3xl font-bold text-white">Dates & Reminders</h1>
            <p className="text-gray-400 mt-1">Never miss important financial dates</p>
          </div>
          <Button 
            onClick={() => {
              setEditingReminder(null);
              setShowForm(!showForm);
            }}
            className="bg-amber-500 hover:bg-amber-600 text-white"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add Reminder
          </Button>
        </div>

        {showForm && (
          <ReminderForm
            reminder={editingReminder}
            onSubmit={handleSubmit}
            onCancel={() => {
              setShowForm(false);
              setEditingReminder(null);
            }}
            currency={currency}
          />
        )}

        <ReminderList
          reminders={reminders}
          isLoading={isLoading}
          onEdit={handleEdit}
          onDelete={handleDelete}
          onMarkCompleted={handleMarkCompleted}
          currency={currency}
        />
      </div>
    </div>
  );
}
