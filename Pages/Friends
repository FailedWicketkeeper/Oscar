import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Plus, Users, ArrowUpRight, ArrowDownLeft, UserPlus } from "lucide-react";
import FriendsList from "../components/friends/FriendsList";
import FriendDetails from "../components/friends/FriendDetails";
import AddFriendForm from "../components/friends/AddFriendForm";
import AddTransactionForm from "../components/friends/AddTransactionForm";

export default function Friends() {
  const [showAddFriend, setShowAddFriend] = useState(false);
  const [showAddTransaction, setShowAddTransaction] = useState(false);
  const [selectedFriend, setSelectedFriend] = useState(null);
  const [editingFriend, setEditingFriend] = useState(null);
  
  const queryClient = useQueryClient();

  const { data: user } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => base44.auth.me(),
  });

  const { data: friends = [] } = useQuery({
    queryKey: ['friends'],
    queryFn: () => base44.entities.Friend.list('name'),
  });

  const { data: transactions = [] } = useQuery({
    queryKey: ['friendTransactions'],
    queryFn: () => base44.entities.FriendTransaction.list('-date'),
  });

  const createFriendMutation = useMutation({
    mutationFn: (data) => base44.entities.Friend.create(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['friends'] });
      setShowAddFriend(false);
      setEditingFriend(null);
    },
  });

  const updateFriendMutation = useMutation({
    mutationFn: ({ id, data }) => base44.entities.Friend.update(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['friends'] });
      setShowAddFriend(false);
      setEditingFriend(null);
    },
  });

  const deleteFriendMutation = useMutation({
    mutationFn: (id) => base44.entities.Friend.delete(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['friends'] });
      queryClient.invalidateQueries({ queryKey: ['friendTransactions'] });
      setSelectedFriend(null);
    },
  });

  const createTransactionMutation = useMutation({
    mutationFn: (data) => base44.entities.FriendTransaction.create(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['friendTransactions'] });
      setShowAddTransaction(false);
    },
  });

  const settleTransactionMutation = useMutation({
    mutationFn: (id) => base44.entities.FriendTransaction.update(id, { settled: true }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['friendTransactions'] });
    },
  });

  const deleteTransactionMutation = useMutation({
    mutationFn: (id) => base44.entities.FriendTransaction.delete(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['friendTransactions'] });
    },
  });

  const handleFriendSubmit = (data) => {
    if (editingFriend) {
      updateFriendMutation.mutate({ id: editingFriend.id, data });
    } else {
      createFriendMutation.mutate(data);
    }
  };

  const handleTransactionSubmit = (data) => {
    createTransactionMutation.mutate(data);
  };

  const handleEditFriend = (friend) => {
    setEditingFriend(friend);
    setShowAddFriend(true);
  };

  const handleDeleteFriend = (id) => {
    if (window.confirm('Are you sure? This will delete all transactions with this friend.')) {
      // Delete all transactions with this friend first
      const friendTransactions = transactions.filter(t => t.friend_id === id);
      Promise.all(friendTransactions.map(t => deleteTransactionMutation.mutateAsync(t.id)))
        .then(() => deleteFriendMutation.mutate(id));
    }
  };

  // Calculate balances
  const calculateBalance = (friendId) => {
    const friendTransactions = transactions.filter(t => t.friend_id === friendId && !t.settled);
    let balance = 0;
    friendTransactions.forEach(t => {
      if (t.transaction_type === 'you_lent') {
        balance += t.amount; // They owe you
      } else {
        balance -= t.amount; // You owe them
      }
    });
    return balance;
  };

  const friendsWithBalances = friends.map(friend => ({
    ...friend,
    balance: calculateBalance(friend.id)
  }));

  const totalYouOwe = friendsWithBalances
    .filter(f => f.balance < 0)
    .reduce((sum, f) => sum + Math.abs(f.balance), 0);

  const totalOwedToYou = friendsWithBalances
    .filter(f => f.balance > 0)
    .reduce((sum, f) => sum + f.balance, 0);

  const currency = user?.currency || 'â‚¹';

  if (selectedFriend) {
    return (
      <FriendDetails
        friend={selectedFriend}
        transactions={transactions.filter(t => t.friend_id === selectedFriend.id)}
        onBack={() => setSelectedFriend(null)}
        onAddTransaction={() => setShowAddTransaction(true)}
        onSettleTransaction={(id) => settleTransactionMutation.mutate(id)}
        onDeleteTransaction={(id) => deleteTransactionMutation.mutate(id)}
        onEditFriend={handleEditFriend}
        onDeleteFriend={handleDeleteFriend}
        currency={currency}
        showAddTransaction={showAddTransaction}
        onCloseTransaction={() => setShowAddTransaction(false)}
        onTransactionSubmit={handleTransactionSubmit}
      />
    );
  }

  return (
    <div className="min-h-screen p-6 md:p-8">
      <div className="max-w-6xl mx-auto space-y-6">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <div>
            <h1 className="text-3xl font-bold text-white">Friends</h1>
            <p className="text-gray-400 mt-1">Split expenses and track balances</p>
          </div>
          <Button 
            onClick={() => {
              setEditingFriend(null);
              setShowAddFriend(true);
            }}
            className="bg-amber-500 hover:bg-amber-600 text-white"
          >
            <UserPlus className="w-4 h-4 mr-2" />
            Add Friend
          </Button>
        </div>

        {showAddFriend && (
          <AddFriendForm
            friend={editingFriend}
            onSubmit={handleFriendSubmit}
            onCancel={() => {
              setShowAddFriend(false);
              setEditingFriend(null);
            }}
          />
        )}

        {/* Summary Cards */}
        <div className="grid md:grid-cols-3 gap-6">
          <Card className="bg-gradient-to-br from-white/10 to-white/5 border-white/20 backdrop-blur-xl">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium text-gray-300">Total Friends</CardTitle>
                <Users className="w-5 h-5 text-blue-400" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-white">{friends.length}</div>
              <p className="text-xs text-gray-400 mt-1">People you track with</p>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-green-500/10 to-emerald-500/10 border-green-500/30 backdrop-blur-xl">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium text-gray-300">You Get Back</CardTitle>
                <ArrowDownLeft className="w-5 h-5 text-green-400" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-green-400">
                {currency}{totalOwedToYou.toLocaleString()}
              </div>
              <p className="text-xs text-gray-400 mt-1">Total owed to you</p>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-red-500/10 to-orange-500/10 border-red-500/30 backdrop-blur-xl">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-sm font-medium text-gray-300">You Owe</CardTitle>
                <ArrowUpRight className="w-5 h-5 text-red-400" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-red-400">
                {currency}{totalYouOwe.toLocaleString()}
              </div>
              <p className="text-xs text-gray-400 mt-1">Total you owe</p>
            </CardContent>
          </Card>
        </div>

        {/* Friends List */}
        <FriendsList
          friends={friendsWithBalances}
          onSelectFriend={setSelectedFriend}
          currency={currency}
        />
      </div>
    </div>
  );
}
