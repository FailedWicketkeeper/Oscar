import React from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { AlertTriangle, TrendingUp, Wallet } from "lucide-react";
import { startOfMonth, endOfMonth, isAfter, isBefore, format } from "date-fns";

export default function BudgetTracker() {
  const { data: user } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => base44.auth.me(),
  });

  const { data: expenses = [] } = useQuery({
    queryKey: ['expenses'],
    queryFn: () => base44.entities.Expense.list('-date'),
  });

  const currency = user?.currency || 'â‚¹';
  const monthlyBudget = user?.monthly_budget || 0;

  const currentMonthExpenses = expenses.filter(expense => {
    const expenseDate = new Date(expense.date);
    const start = startOfMonth(new Date());
    const end = endOfMonth(new Date());
    return isAfter(expenseDate, start) && isBefore(expenseDate, end);
  });

  const totalSpent = currentMonthExpenses.reduce((sum, exp) => sum + (exp.amount || 0), 0);
  const remaining = monthlyBudget - totalSpent;
  const percentageUsed = monthlyBudget > 0 ? (totalSpent / monthlyBudget) * 100 : 0;

  // Category breakdown
  const categoryTotals = currentMonthExpenses.reduce((acc, expense) => {
    acc[expense.category] = (acc[expense.category] || 0) + expense.amount;
    return acc;
  }, {});

  const sortedCategories = Object.entries(categoryTotals)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 5);

  const getStatusColor = (percentage) => {
    if (percentage >= 90) return 'text-red-400';
    if (percentage >= 75) return 'text-amber-400';
    return 'text-green-400';
  };

  const getProgressColor = (percentage) => {
    if (percentage >= 90) return 'bg-red-500';
    if (percentage >= 75) return 'bg-amber-500';
    return 'bg-green-500';
  };

  return (
    <div className="min-h-screen p-6 md:p-8">
      <div className="max-w-6xl mx-auto space-y-6">
        <div>
          <h1 className="text-3xl font-bold text-white">Budget Tracker</h1>
          <p className="text-gray-400 mt-1">Monitor your spending for {format(new Date(), 'MMMM yyyy')}</p>
        </div>

        {/* Budget Overview */}
        <Card className="bg-gradient-to-br from-white/10 to-white/5 border-white/20 backdrop-blur-xl">
          <CardContent className="p-8">
            <div className="text-center space-y-6">
              <div>
                <p className="text-gray-300 text-sm mb-2">Monthly Budget</p>
                <h2 className="text-5xl font-bold text-white">{currency}{monthlyBudget.toLocaleString()}</h2>
              </div>

              <div className="grid md:grid-cols-2 gap-8 max-w-2xl mx-auto">
                <div className="text-center">
                  <p className="text-gray-400 text-sm mb-1">Spent</p>
                  <p className="text-3xl font-bold text-red-400">{currency}{totalSpent.toLocaleString()}</p>
                </div>
                <div className="text-center">
                  <p className="text-gray-400 text-sm mb-1">Remaining</p>
                  <p className={`text-3xl font-bold ${remaining >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                    {currency}{Math.abs(remaining).toLocaleString()}
                  </p>
                </div>
              </div>

              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className={`text-2xl font-bold ${getStatusColor(percentageUsed)}`}>
                    {percentageUsed.toFixed(1)}% Used
                  </span>
                  {percentageUsed >= 90 && (
                    <div className="flex items-center gap-2 text-red-400">
                      <AlertTriangle className="w-5 h-5" />
                      <span className="text-sm font-medium">Budget Alert!</span>
                    </div>
                  )}
                </div>
                <div className="relative">
                  <Progress 
                    value={Math.min(percentageUsed, 100)} 
                    className="h-4 bg-white/10"
                  />
                  <div 
                    className={`absolute top-0 left-0 h-4 rounded-full transition-all duration-500 ${getProgressColor(percentageUsed)}`}
                    style={{ width: `${Math.min(percentageUsed, 100)}%` }}
                  />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Status Cards */}
        <div className="grid md:grid-cols-3 gap-6">
          <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
            <CardHeader>
              <CardTitle className="text-sm font-medium text-gray-300 flex items-center gap-2">
                <Wallet className="w-4 h-4" />
                Total Transactions
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold text-white">{currentMonthExpenses.length}</p>
              <p className="text-sm text-gray-400 mt-1">This month</p>
            </CardContent>
          </Card>

          <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
            <CardHeader>
              <CardTitle className="text-sm font-medium text-gray-300 flex items-center gap-2">
                <TrendingUp className="w-4 h-4" />
                Daily Average
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold text-white">
                {currency}{(totalSpent / new Date().getDate()).toFixed(0)}
              </p>
              <p className="text-sm text-gray-400 mt-1">Per day spending</p>
            </CardContent>
          </Card>

          <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
            <CardHeader>
              <CardTitle className="text-sm font-medium text-gray-300 flex items-center gap-2">
                <AlertTriangle className="w-4 h-4" />
                Days Remaining
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold text-white">
                {endOfMonth(new Date()).getDate() - new Date().getDate()}
              </p>
              <p className="text-sm text-gray-400 mt-1">Until month end</p>
            </CardContent>
          </Card>
        </div>

        {/* Top Categories */}
        <Card className="bg-white/10 border-white/20 backdrop-blur-xl">
          <CardHeader className="border-b border-white/10">
            <CardTitle className="text-xl font-bold text-white">Top Spending Categories</CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            {sortedCategories.length > 0 ? (
              <div className="space-y-4">
                {sortedCategories.map(([category, amount]) => {
                  const categoryPercentage = (amount / totalSpent) * 100;
                  return (
                    <div key={category} className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-white font-medium">{category}</span>
                        <span className="text-white font-bold">{currency}{amount.toLocaleString()}</span>
                      </div>
                      <div className="relative">
                        <div className="w-full bg-white/10 rounded-full h-2">
                          <div 
                            className="bg-gradient-to-r from-amber-400 to-orange-500 h-2 rounded-full transition-all duration-500"
                            style={{ width: `${categoryPercentage}%` }}
                          />
                        </div>
                        <span className="text-xs text-gray-400 mt-1">{categoryPercentage.toFixed(1)}% of total</span>
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-gray-400">No expenses recorded this month</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
